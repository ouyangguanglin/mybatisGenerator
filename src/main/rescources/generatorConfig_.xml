<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<properties resource="generator.properties"/>
    <context id="test" targetRuntime="MyBatis3">
    	<property name="javaFileEncoding" value="UTF-8"/>
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"></plugin>  
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin> 
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"></plugin> 
        <plugin type="com.midea.msmart.generator.plugin.MsmartAnnotationPlugin"></plugin> 
        <commentGenerator type="com.midea.msmart.generator.comment.MsmartCommentGenerator">
            <!-- 这个元素用来去除指定生成的注释中是否包含生成的日期 false:表示保护 -->
            <!-- 如果生成日期，会造成即使修改一个字段，整个实体类所有属性都会发生变化，不利于版本控制，所以设置为true -->
            <property name="suppressDate" value="true" />
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false" />
        </commentGenerator>
        <!--数据库链接URL，用户名、密码 -->
        <jdbcConnection driverClass="${jdbc.driver}" 
            connectionURL="${jdbc.url}"  userId="${jdbc.username}" password="${jdbc.password}">
            </jdbcConnection>
        <javaTypeResolver>
            <!-- This property is used to specify whether MyBatis Generator should 
                force the use of java.math.BigDecimal for DECIMAL and NUMERIC fields, -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>
        <!-- 生成模型的包名和位置 -->
        <javaModelGenerator 
        	targetPackage="${domain.package}"
            targetProject="${domain.target}">
            <property name="enableSubPackages" value="true" />
            <property name="trimStrings" value="true" />
        </javaModelGenerator>
        <!-- 生成映射文件的包名和位置 -->
        <sqlMapGenerator 
        	targetPackage="${mapper.package}"
            targetProject="${mapper.target}">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>
        <!-- 生成DAO的包名和位置 -->
        <javaClientGenerator type="XMLMAPPER" 
            targetPackage="${dao.package}" 
            targetProject="${dao.target}">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>
        
        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
        选择的table会生成一下文件：
        1，SQL map文件
        2，生成一个主键类；
        3，除了BLOB和主键的其他字段的类；
        4，包含BLOB的类；
        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
        6，Mapper接口（可选）

        tableName（必要）：要生成对象的表名；
        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
            4，否则，使用指定的大小写格式查询；
        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

        可选：
        1，schema：数据库的schema；
        2，catalog：数据库的catalog；
        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
        5，enableInsert（默认true）：指定是否生成insert语句；
        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
        13，modelType：参考context元素的defaultModelType，相当于覆盖；
        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
     -->
        
        
        <!-- <table tableName="t_role" domainObjectName="Role" 
        	enableInsert="true"
        	enableDeleteByPrimaryKey="true"
        	enableDeleteByExample="false"
        	enableUpdateByPrimaryKey="true"
            enableUpdateByExample="false"
        	enableSelectByPrimaryKey="true"
        	enableSelectByExample="false"
            enableCountByExample="false" >
            <property name="" value=""/>
            <generatedKey column="id" sqlStatement="SELECT UPPER(REPLACE(UUID(), '-', '')) FROM DUAL"/>
        </table>
        
        <table tableName="t_user" domainObjectName="User"
        	enableDeleteByExample="false"
            enableUpdateByExample="false"
        	enableSelectByExample="false"
            enableCountByExample="false" >
            <generatedKey column="id" sqlStatement="SELECT UPPER(REPLACE(UUID(), '-', '')) FROM DUAL"/>
        </table> -->
        
        <table tableName="t_msmart_app_relation" domainObjectName="AppRelation"
        	enableInsert="true"
        	enableDeleteByPrimaryKey="true"
        	enableDeleteByExample="false"
        	enableUpdateByPrimaryKey="true"
            enableUpdateByExample="false"
        	enableSelectByPrimaryKey="true"
        	enableSelectByExample="false"
            enableCountByExample="false" >
            <generatedKey column="id" sqlStatement="SELECT UPPER(REPLACE(UUID(), '-', '')) FROM DUAL"/>
        </table>
        
        <table tableName="t_msmart_bind_record" domainObjectName="BindRecord"
        	enableInsert="true"
        	enableDeleteByPrimaryKey="true"
        	enableDeleteByExample="false"
        	enableUpdateByPrimaryKey="true"
            enableUpdateByExample="false"
        	enableSelectByPrimaryKey="true"
        	enableSelectByExample="false"
            enableCountByExample="false" >
            <generatedKey column="id" sqlStatement="SELECT UPPER(REPLACE(UUID(), '-', '')) FROM DUAL"/>
        </table>
        
        <!-- <table tableName="t_role_user" domainObjectName="RoleUser"
        	enableDeleteByExample="false"
            enableUpdateByExample="false"
        	enableSelectByExample="false"
            enableCountByExample="false" >
        </table>
        
        <table tableName="t_role_auth" domainObjectName="RoleAuth"
        	enableDeleteByExample="false"
            enableUpdateByExample="false"
        	enableSelectByExample="false"
            enableCountByExample="false" >
        </table>
        
        <table tableName="t_user_auth" domainObjectName="UserAuth"
        	selectByExampleQueryId="true"
        	enableDeleteByExample="false"
            enableUpdateByExample="false"
        	enableSelectByExample="false"
            enableCountByExample="false" >
        </table> -->
    </context>
</generatorConfiguration>